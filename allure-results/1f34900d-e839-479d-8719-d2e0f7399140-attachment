# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Network interception
- Location: C:\Users\DELL\Desktop\POM_Feb\tests\ni.spec.ts:4:5

# Error details

```
Error: expect(locator).toBeVisible()

Locator: locator('text=Mocky')
Expected: visible
Received: <element(s) not found>
Call log:
  - expect.toBeVisible with timeout 5000ms
  - waiting for locator('text=Mocky')

    at C:\Users\DELL\Desktop\POM_Feb\tests\ni.spec.ts:72:43
```

# Test source

```ts
   1 | import test, { expect } from "@playwright/test";
   2 | import { runInContext } from "vm";
   3 |
   4 | test(`Network interception`,async({page})=>{
   5 | //    let header:any;
   6 | //    await page.route(`**/aura?preloadActions`,(route,request)=>{
   7 | //       if(request.method()=="POST"){
   8 | //          console.log(request.url())
   9 | //          console.log(request.headers())
  10 | //           header=request.allHeaders()
  11 | //       }
  12 | //       console.log(header)
  13 | //      // delete Headers['']
  14 |
  15 | //          route.continue({
  16 | //              postData:{
  17 | //                  "Date":""
  18 | //              }
  19 | //          })
  20 |
  21 | //          route.fulfill({
  22 | //              status:500,
  23 | //              headers:{
  24 | //                  "content-type":"application/txt"
  25 | //              }
  26 | //          })
  27 |
  28 |
  29 | //  })
  30 |
  31 | await page.goto('https://uibank.uipath.com'); //monitoring the request
  32 |
  33 | //  page.on('request',request=>{
  34 | //     console.log(`<<--Request--->>`,request.method(),request.url(),request.postData());
  35 |  
  36 | //  })
  37 |
  38 | //  page.on('response',response=>{
  39 | //     console.log(`<<---Responses --->>`,response.request().url(),response.status(),response.allHeaders());
  40 |  
  41 | //  })
  42 |
  43 |
  44 |  await page.route("**/api/users/login",async(route,request)=>{
  45 |     // console.log(request.postData())
  46 |     // //modify request
  47 |     
  48 |   delete Headers['date']
  49 |     await route.continue({
  50 |         postData:JSON.stringify({"username":""})
  51 |     })
  52 |
  53 |     await route.fulfill({
  54 |         status: 200,
  55 |         contentType: 'application/json',
  56 |         body: JSON.stringify({
  57 |           userId: 'mock-user-123',
  58 |           firstName: 'Mocky',
  59 |           lastName: 'User',
  60 |           token: 'mock-token-value'
  61 |         })
  62 |       });
  63 |     });
  64 |
  65 |
  66 |    
  67 |  await page.fill('input[name="username"]', 'FebApiuser');
  68 |  await page.fill('input[name="password"]', 'Eagle@123');
  69 |  await page.click('button:has-text("Sign In")');
  70 |  await page.click('button:has-text("I agree to the Privacy Policy ")')
  71 |  await page.title()
> 72 |  await expect(page.locator('text=Mocky')).toBeVisible();
     |                                           ^ Error: expect(locator).toBeVisible()
  73 |
  74 |
  75 | })
```