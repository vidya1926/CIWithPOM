# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Mock login API in UIBank
- Location: C:\Users\DELL\Desktop\POM_Feb\tests\ni.spec.ts:4:5

# Error details

```
Error: page.click: Test ended.
Call log:
  - waiting for locator('button:has-text("Sign In")')
    - locator resolved to <button type="submit" _ngcontent-jae-c8="" class="btn btn-white col-md-12">Sign In</button>
  - attempting click action
    - waiting for element to be visible, enabled and stable
    - element is visible, enabled and stable
    - scrolling into view if needed
    - done scrolling
    - <p class="medium-text" _ngcontent-jae-c7="">…</p> from <div class="cdk-overlay-container">…</div> subtree intercepts pointer events
  - retrying click action
    - waiting for element to be visible, enabled and stable
    - element is not stable
  - retrying click action
    - waiting 20ms
    - waiting for element to be visible, enabled and stable
  - element was detached from the DOM, retrying

    at C:\Users\DELL\Desktop\POM_Feb\tests\ni.spec.ts:27:16
```

# Test source

```ts
   1 | import test, { expect } from "@playwright/test";
   2 |
   3 |   
   4 | test('Mock login API in UIBank', async ({ page }) => {
   5 |     // 1. Intercept the login API request
   6 |     await page.route('**/api/users/login', async route => {
   7 |       console.log('Intercepted /api/users/login');
   8 |   
   9 |       // 2. Send a mocked response
  10 |       await route.fulfill({
  11 |         status: 200,
  12 |         contentType: 'application/json',
  13 |         body: JSON.stringify({
  14 |           userId: 'mock-user-123',
  15 |           firstName: 'Mocky',
  16 |           lastName: 'User',
  17 |           token: 'mock-token-value'
  18 |         })
  19 |       });
  20 |     });
  21 |   
  22 |     // 3. Load the app and trigger login
  23 |     await page.goto('https://uibank.uipath.com');
  24 |     await page.fill('input[name="username"]', 'FebApiuser');
  25 |     await page.fill('input[name="password"]', 'Eagle@123');
  26 |     await page.click('button:has-text("I agree to the Privacy Policy ")')
> 27 |     await page.click('button:has-text("Sign In")');
     |                ^ Error: page.click: Test ended.
  28 |   
  29 |     // 4. Optional assertion (if app displays first name or similar)
  30 |     await expect(page.locator('text=Mocky')).toBeVisible();
  31 |   });
  32 |   
  33 |
```